{"version":3,"sources":["SortingAlgorithm/mergeSort.js","SortingAlgorithm/bubbleSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","index.js"],"names":["mergeSortAnimation","arr","length","animation","dupArr","slice","mergeSortHelper","startIdx","endIdx","midIdx","Math","floor","k","i","j","push","doMerge","bubbleSortAnimation","len","iters","swapped","swap","bubbleSortHelper","idx1","idx2","temp","ACTION_COLOR","DEFAULT_COLOR","randomIntFromInterval","MIN_VAL","MAX_VAL","random","SortingVisualizer","props","setArray","console","log","array","arraySize","state","setState","handleChange","e","target","value","isRunning","this","obj","document","getElementsByClassName","firstIdx","secondIdx","firstObjStyle","style","secondObjStyle","setTimeout","backgroundColor","barIdx","newHeight","height","isSorted","includes","barIdx1","barIdx2","barIdx1Style","barIdx2Style","height1","timing","className","map","idx","width","ref","disabled","id","type","min","max","defaultValue","background","onChange","onClick","mergeSort","bubbleSort","Component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a9eb0cc0.chunk.js","sourcesContent":["export function mergeSortAnimation(arr) {\r\n    const length = arr.length;\r\n    if (length <= 1) return arr;\r\n    const animation = [];\r\n    const dupArr = arr.slice();\r\n    mergeSortHelper(arr.slice(), dupArr, animation, 0, length - 1);\r\n    // console.log('arr:',arr);\r\n    return animation;\r\n}\r\n\r\nfunction mergeSortHelper(arr, dupArr, animation, startIdx, endIdx) {\r\n    if (startIdx === endIdx) return;\r\n    const midIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(dupArr,arr , animation, startIdx, midIdx);\r\n    mergeSortHelper(dupArr,arr, animation, midIdx + 1, endIdx);\r\n    doMerge(arr, dupArr, animation, startIdx, midIdx, endIdx);\r\n}\r\n\r\nfunction doMerge(arr, dupArr, animation, startIdx, midIdx, endIdx) {\r\n    let k = startIdx, i = startIdx;\r\n    let j = midIdx + 1;\r\n\r\n    while (i <= midIdx && j <= endIdx) {\r\n        animation.push([i, j]);// change color\r\n        animation.push([i, j]);// revert color\r\n\r\n        if (dupArr[i] <= dupArr[j]) {\r\n            animation.push([k, dupArr[i]]);\r\n            arr[k++] = dupArr[i++];\r\n        } else {\r\n            animation.push([k, dupArr[j]]);\r\n            arr[k++] = dupArr[j++];\r\n        }\r\n\r\n    }\r\n    while (i <= midIdx) {\r\n\r\n        animation.push([i, i]);// change color\r\n        animation.push([i, i]);// revert color\r\n        animation.push([k, dupArr[i]]);\r\n        arr[k++] = dupArr[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animation.push([j, j]);// change color\r\n        animation.push([j, j]);// revert color\r\n        animation.push([k, dupArr[j]]);\r\n        arr[k++] = dupArr[j++];\r\n    }\r\n\r\n}\r\n","export function bubbleSortAnimation(arr) {\r\n    const animation = [];\r\n    const dupArr = arr.slice();\r\n    bubbleSortHelper(dupArr, animation, dupArr.length);\r\n    return animation;\r\n}\r\n\r\n\r\nfunction bubbleSortHelper(dupArr, animation, len) {\r\n    let iters = len - 1;\r\n    let swapped = true;\r\n    while (iters && swapped) {\r\n        swapped = false;\r\n        for (let i = 0; i < iters ; i++) {\r\n            animation.push([i, i + 1]);\r\n            animation.push([i, i + 1]);\r\n            if (dupArr[i] > dupArr[i + 1]) {\r\n                swapped = true;\r\n                animation.push([i, i + 1]);\r\n                swap(dupArr, i, i + 1);\r\n            } else {\r\n                animation.push(['none']);\r\n            }\r\n        }\r\n        iters--;\r\n    }\r\n}\r\n\r\nfunction swap(dupArr, idx1, idx2) {\r\n    const temp = dupArr[idx1];\r\n    dupArr[idx1] = dupArr[idx2];\r\n    dupArr[idx2] = temp;\r\n}","import './SortingVisualizer.css';\r\nimport React, {Component} from 'react';\r\nimport {mergeSortAnimation} from \"../SortingAlgorithm/mergeSort\";\r\nimport {bubbleSortAnimation} from \"../SortingAlgorithm/bubbleSort\";\r\n\r\nconst MIN_VAL = 5;\r\nconst MAX_VAL = 500;\r\nconst ACTION_COLOR = 'red';\r\nconst DEFAULT_COLOR = 'slateblue';\r\n\r\n\r\nexport class SortingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            arraySize: 65,\r\n            isRunning: false,\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setArray();\r\n    }\r\n\r\n    setArray = () => {\r\n\r\n        console.log('setArray');\r\n        let array = [];\r\n        const {arraySize} = this.state;\r\n        console.log('arraySize', arraySize);\r\n\r\n        for (let i = 0; i < arraySize; i++) {\r\n            array.push(randomIntFromInterval(MIN_VAL, MAX_VAL));\r\n        }\r\n        this.setState({array: array});\r\n    };\r\n\r\n    mergeSort() {\r\n        this.setState({isRunning: !this.state.isRunning});\r\n        const {array} = this.state;\r\n        const animation = mergeSortAnimation(array);\r\n        const obj = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < animation.length; i = i + 3) {\r\n            // console.log('animation[i]:',animation[i]);\r\n            const [firstIdx, secondIdx] = animation[i];\r\n            const firstObjStyle = obj[firstIdx].style;\r\n            const secondObjStyle = obj[secondIdx].style;\r\n            setTimeout(() => {\r\n                firstObjStyle.backgroundColor = ACTION_COLOR;\r\n                secondObjStyle.backgroundColor = ACTION_COLOR;\r\n            }, i * 10);\r\n            setTimeout(() => {\r\n                firstObjStyle.backgroundColor = DEFAULT_COLOR;\r\n                secondObjStyle.backgroundColor = DEFAULT_COLOR;\r\n            }, (i + 1) * 10);\r\n            setTimeout(() => {\r\n                const [barIdx, newHeight] = animation[i + 2];\r\n                const barIdxStyle = obj[barIdx].style;\r\n                barIdxStyle.height = `${newHeight}px`;\r\n            }, (i + 2) * 10);\r\n        }\r\n        this.isSorted(animation.length);\r\n    }\r\n\r\n    bubbleSort() {\r\n        this.setState({isRunning: !this.state.isRunning}, () => {\r\n            console.log(this.state.isRunning);\r\n        });\r\n        const {array} = this.state;\r\n        const animation = bubbleSortAnimation(array);\r\n        const obj = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < animation.length; i = i + 3) {\r\n            if (animation[i]) {\r\n                // console.log('animation[i]:',animation[i]);\r\n                // console.log(animation[i]);\r\n                const [firstIdx, secondIdx] = animation[i];\r\n                const firstObjStyle = obj[firstIdx].style;\r\n                const secondObjStyle = obj[secondIdx].style;\r\n                setTimeout(() => {\r\n                    firstObjStyle.backgroundColor = ACTION_COLOR;\r\n                    secondObjStyle.backgroundColor = ACTION_COLOR;\r\n                }, i * 10);\r\n                setTimeout(() => {\r\n                    firstObjStyle.backgroundColor = DEFAULT_COLOR;\r\n                    secondObjStyle.backgroundColor = DEFAULT_COLOR;\r\n                }, (i + 1) * 10);\r\n                if (!animation[i + 2].includes('none')) {\r\n                    setTimeout(() => {\r\n                        const [barIdx1, barIdx2] = animation[i + 2];\r\n                        const barIdx1Style = obj[barIdx1].style;\r\n                        const barIdx2Style = obj[barIdx2].style;\r\n                        const height1 = barIdx1Style.height;\r\n                        barIdx1Style.height = barIdx2Style.height;\r\n                        barIdx2Style.height = height1;\r\n                    }, (i + 2) * 10);\r\n                }\r\n            }\r\n        }\r\n        this.isSorted(animation.length);\r\n    }\r\n\r\n    isSorted(timing) {\r\n        setTimeout(() => {\r\n            console.log('now');\r\n            this.setState({isRunning: !this.state.isRunning}, () => {\r\n                console.log(this.state.isRunning);\r\n            });\r\n        }, timing * 10);\r\n    }\r\n\r\n    // updateIsRunning = async () => {\r\n    //     this.setState({isRunning: true}, () => {\r\n    //         console.log(this.state.isRunning);\r\n    //     });\r\n    //\r\n    //     const promise= this.bubbleSort();\r\n    //\r\n    //     promise.then(()=>this.setState({isRunning: false}, () => {\r\n    //         console.log(this.state.isRunning);\r\n    //     }));\r\n    // };\r\n\r\n    handleChange = e => {\r\n        // this.setState({arraySize: e.target.value * 5},()=>{\r\n        //         console.log('arraySize', this.state.arraySize);\r\n        // });\r\n        this.state.arraySize = e.target.value * 5;\r\n        this.setArray();\r\n    };\r\n\r\n\r\n    render() {\r\n        const {array, isRunning} = this.state;\r\n        return (\r\n            <div className=\"main-container\">\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div className=\"array-bar\"\r\n                             key={idx}\r\n                             style={{\r\n                                 height: `${value}px`,\r\n                                 width: this.state.arraySize < 30 ? '35px' :\r\n                                     this.state.arraySize < 50 ? '20px' :\r\n                                         this.state.arraySize < 75 ? '15px' :\r\n                                             this.state.arraySize < 100 ? '10px' : '7px',\r\n                                 backgroundColor: DEFAULT_COLOR\r\n                             }}/>\r\n                    ))}\r\n                </div>\r\n                <div className=\"controls-container\">\r\n                    <input\r\n                        ref=\"refer\"\r\n                        disabled={isRunning ? 'disabled' : null}\r\n                        id=\"size-bar\"\r\n                        type=\"range\"\r\n                        min=\"1\"\r\n                        max=\"25\"\r\n                        defaultValue={this.state.arraySize / 5}\r\n                        style={{background: 'blue'}}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <button onClick={() => {\r\n                        this.setArray();\r\n                    }} disabled={isRunning ? 'disabled' : null}\r\n                    >Generate New Array\r\n                    </button>\r\n                    <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    {/*<button onClick={() => this.setArray()}>Quick Sort</button>*/}\r\n                    {/*<button onClick={() => this.setArray()}>Heap Sort</button>*/}\r\n                    <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(MIN_VAL, MAX_VAL) {\r\n    return Math.floor(Math.random() * (MAX_VAL - MIN_VAL + 1) + MIN_VAL);\r\n}\r\n\r\nfunction sortedArrCheck(JSsortedArr, mySortedArr) {\r\n    if (JSsortedArr.length !== mySortedArr.length) return false;\r\n    return JSsortedArr.toString() === mySortedArr.toString();\r\n\r\n}\r\n\r\n\r\nexport default SortingVisualizer;\r\n\r\n\r\n","import './App.css';\nimport React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer></SortingVisualizer>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}